
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  name: 'name',
  avatar: 'avatar',
  userType: 'userType',
  status: 'status',
  emailVerified: 'emailVerified',
  emailVerifiedAt: 'emailVerifiedAt',
  lastLoginAt: 'lastLoginAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RefreshTokenScalarFieldEnum = {
  id: 'id',
  token: 'token',
  userId: 'userId',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.CustomerProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  company: 'company',
  website: 'website',
  industry: 'industry',
  companySize: 'companySize',
  plan: 'plan',
  testsCreated: 'testsCreated',
  totalSpent: 'totalSpent',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TesterProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  phone: 'phone',
  city: 'city',
  region: 'region',
  age: 'age',
  education: 'education',
  occupation: 'occupation',
  experience: 'experience',
  languages: 'languages',
  devices: 'devices',
  internetSpeed: 'internetSpeed',
  availability: 'availability',
  motivation: 'motivation',
  rating: 'rating',
  completedTests: 'completedTests',
  totalEarnings: 'totalEarnings',
  level: 'level',
  isVerified: 'isVerified',
  verifiedAt: 'verifiedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TestScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  instructions: 'instructions',
  testType: 'testType',
  platform: 'platform',
  targetUrl: 'targetUrl',
  status: 'status',
  maxTesters: 'maxTesters',
  currentTesters: 'currentTesters',
  paymentPerTester: 'paymentPerTester',
  estimatedDuration: 'estimatedDuration',
  requirements: 'requirements',
  tasks: 'tasks',
  demographics: 'demographics',
  createdById: 'createdById',
  publishedAt: 'publishedAt',
  completedAt: 'completedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TestAssetScalarFieldEnum = {
  id: 'id',
  testId: 'testId',
  fileName: 'fileName',
  originalName: 'originalName',
  mimeType: 'mimeType',
  size: 'size',
  url: 'url',
  createdAt: 'createdAt'
};

exports.Prisma.TestSessionScalarFieldEnum = {
  id: 'id',
  testId: 'testId',
  customerId: 'customerId',
  status: 'status',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  totalDuration: 'totalDuration',
  successRate: 'successRate',
  insights: 'insights',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TesterSessionScalarFieldEnum = {
  id: 'id',
  testSessionId: 'testSessionId',
  testId: 'testId',
  testerId: 'testerId',
  status: 'status',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  duration: 'duration',
  rating: 'rating',
  feedback: 'feedback',
  screenRecording: 'screenRecording',
  taskResults: 'taskResults',
  deviceInfo: 'deviceInfo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  method: 'method',
  transactionId: 'transactionId',
  description: 'description',
  metadata: 'metadata',
  paidAt: 'paidAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EarningScalarFieldEnum = {
  id: 'id',
  testerId: 'testerId',
  testerSessionId: 'testerSessionId',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  description: 'description',
  paidAt: 'paidAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  message: 'message',
  data: 'data',
  read: 'read',
  readAt: 'readAt',
  createdAt: 'createdAt'
};

exports.Prisma.AnalyticsScalarFieldEnum = {
  id: 'id',
  testId: 'testId',
  userId: 'userId',
  event: 'event',
  data: 'data',
  timestamp: 'timestamp',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent'
};

exports.Prisma.SystemConfigScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  description: 'description',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserType = exports.$Enums.UserType = {
  CUSTOMER: 'CUSTOMER',
  TESTER: 'TESTER',
  ADMIN: 'ADMIN'
};

exports.UserStatus = exports.$Enums.UserStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  SUSPENDED: 'SUSPENDED',
  PENDING_VERIFICATION: 'PENDING_VERIFICATION'
};

exports.TesterLevel = exports.$Enums.TesterLevel = {
  NEW_TESTER: 'NEW_TESTER',
  BRONZE: 'BRONZE',
  SILVER: 'SILVER',
  GOLD: 'GOLD',
  EXPERT: 'EXPERT'
};

exports.TestType = exports.$Enums.TestType = {
  USABILITY: 'USABILITY',
  FEEDBACK: 'FEEDBACK',
  SURVEY: 'SURVEY',
  INTERVIEW: 'INTERVIEW'
};

exports.TestPlatform = exports.$Enums.TestPlatform = {
  WEB: 'WEB',
  MOBILE_APP: 'MOBILE_APP',
  DESKTOP: 'DESKTOP'
};

exports.TestStatus = exports.$Enums.TestStatus = {
  DRAFT: 'DRAFT',
  PUBLISHED: 'PUBLISHED',
  RUNNING: 'RUNNING',
  PAUSED: 'PAUSED',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.SessionStatus = exports.$Enums.SessionStatus = {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  REFUNDED: 'REFUNDED'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  CREDIT_CARD: 'CREDIT_CARD',
  CHAPA: 'CHAPA',
  TELEBIRR: 'TELEBIRR',
  CBE_BIRR: 'CBE_BIRR',
  BANK_TRANSFER: 'BANK_TRANSFER'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  TEST_INVITATION: 'TEST_INVITATION',
  TEST_COMPLETED: 'TEST_COMPLETED',
  PAYMENT_RECEIVED: 'PAYMENT_RECEIVED',
  EARNING_AVAILABLE: 'EARNING_AVAILABLE',
  SYSTEM_UPDATE: 'SYSTEM_UPDATE',
  ACCOUNT_UPDATE: 'ACCOUNT_UPDATE'
};

exports.Prisma.ModelName = {
  User: 'User',
  RefreshToken: 'RefreshToken',
  CustomerProfile: 'CustomerProfile',
  TesterProfile: 'TesterProfile',
  Test: 'Test',
  TestAsset: 'TestAsset',
  TestSession: 'TestSession',
  TesterSession: 'TesterSession',
  Payment: 'Payment',
  Earning: 'Earning',
  Notification: 'Notification',
  Analytics: 'Analytics',
  SystemConfig: 'SystemConfig'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
