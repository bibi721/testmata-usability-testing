// Masada Database Schema
// Ethiopian Usability Testing Platform

generator client {
 provider = "prisma-client-ts"
  previewFeatures = ["clientExtensions"]
  binaryTargets = ["native"]
  // ðŸ‘‡ Add this if needed
  seed = "node prisma/seed.ts"
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================
// USER MANAGEMENT
// ================================

enum UserType {
  CUSTOMER
  TESTER
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

model User {
  id                String     @id @default(cuid())
  email             String     @unique
  password          String
  name              String
  avatar            String?
  userType          UserType
  status            UserStatus @default(PENDING_VERIFICATION)
  emailVerified     Boolean    @default(false)
  emailVerifiedAt   DateTime?
  lastLoginAt       DateTime?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  // Relationships
  customerProfile   CustomerProfile?
  testerProfile     TesterProfile?
  
  // Customer relationships
  tests             Test[]
  testSessions      TestSession[]
  payments          Payment[]
  
  // Tester relationships
  testerSessions    TesterSession[]
  earnings          Earning[]
  notifications     Notification[]
  
  @@map("users")
}

// ================================
// CUSTOMER PROFILES
// ================================

model CustomerProfile {
  id              String   @id @default(cuid())
  userId          String   @unique
  company         String?
  website         String?
  industry        String?
  companySize     String?
  plan            String   @default("free")
  testsCreated    Int      @default(0)
  totalSpent      Decimal  @default(0) @db.Decimal(10, 2)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("customer_profiles")
}

// ================================
// TESTER PROFILES
// ================================

enum TesterLevel {
  NEW_TESTER
  BRONZE
  SILVER
  GOLD
  EXPERT
}

model TesterProfile {
  id                String      @id @default(cuid())
  userId            String      @unique
  phone             String?
  city              String?
  region            String?
  age               String?
  education         String?
  occupation        String?
  experience        String?
  languages         String[]    // JSON array of languages
  devices           String[]    // JSON array of devices
  internetSpeed     String?
  availability      String?
  motivation        String?
  rating            Decimal     @default(0) @db.Decimal(3, 2)
  completedTests    Int         @default(0)
  totalEarnings     Decimal     @default(0) @db.Decimal(10, 2)
  level             TesterLevel @default(NEW_TESTER)
  isVerified        Boolean     @default(false)
  verifiedAt        DateTime?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("tester_profiles")
}

// ================================
// TESTING SYSTEM
// ================================

enum TestStatus {
  DRAFT
  PUBLISHED
  RUNNING
  PAUSED
  COMPLETED
  CANCELLED
}

enum TestType {
  USABILITY
  FEEDBACK
  SURVEY
  INTERVIEW
}

enum TestPlatform {
  WEB
  MOBILE_APP
  DESKTOP
}

model Test {
  id                String       @id @default(cuid())
  title             String
  description       String
  instructions      String?
  testType          TestType
  platform          TestPlatform
  targetUrl         String?
  status            TestStatus   @default(DRAFT)
  maxTesters        Int          @default(10)
  currentTesters    Int          @default(0)
  paymentPerTester  Decimal      @db.Decimal(8, 2)
  estimatedDuration Int          // in minutes
  requirements      String[]     // JSON array of requirements
  tasks             Json?        // JSON object with test tasks
  demographics      Json?        // JSON object with demographic filters
  createdById       String
  publishedAt       DateTime?
  completedAt       DateTime?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  
  // Relationships
  createdBy         User         @relation(fields: [createdById], references: [id])
  testSessions      TestSession[]
  testerSessions    TesterSession[]
  testAssets        TestAsset[]
  
  @@map("tests")
}

model TestAsset {
  id          String   @id @default(cuid())
  testId      String
  fileName    String
  originalName String
  mimeType    String
  size        Int
  url         String
  createdAt   DateTime @default(now())
  
  test        Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
  
  @@map("test_assets")
}

// ================================
// TEST SESSIONS
// ================================

enum SessionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
}

model TestSession {
  id              String        @id @default(cuid())
  testId          String
  customerId      String
  status          SessionStatus @default(PENDING)
  startedAt       DateTime?
  completedAt     DateTime?
  totalDuration   Int?          // in seconds
  successRate     Decimal?      @db.Decimal(5, 2)
  insights        Json?         // JSON object with insights
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relationships
  test            Test          @relation(fields: [testId], references: [id])
  customer        User          @relation(fields: [customerId], references: [id])
  testerSessions  TesterSession[]
  
  @@map("test_sessions")
}

model TesterSession {
  id              String        @id @default(cuid())
  testSessionId   String
  testId          String
  testerId        String
  status          SessionStatus @default(PENDING)
  startedAt       DateTime?
  completedAt     DateTime?
  duration        Int?          // in seconds
  rating          Int?          // 1-5 rating
  feedback        String?
  screenRecording String?       // URL to recording file
  taskResults     Json?         // JSON object with task completion results
  deviceInfo      Json?         // JSON object with device information
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relationships
  testSession     TestSession   @relation(fields: [testSessionId], references: [id])
  test            Test          @relation(fields: [testId], references: [id])
  tester          User          @relation(fields: [testerId], references: [id])
  
  @@map("tester_sessions")
}

// ================================
// PAYMENTS & EARNINGS
// ================================

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  CHAPA
  TELEBIRR
  CBE_BIRR
  BANK_TRANSFER
}

model Payment {
  id              String        @id @default(cuid())
  customerId      String
  amount          Decimal       @db.Decimal(10, 2)
  currency        String        @default("ETB")
  status          PaymentStatus @default(PENDING)
  method          PaymentMethod
  transactionId   String?
  description     String?
  metadata        Json?         // Additional payment data
  paidAt          DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  customer        User          @relation(fields: [customerId], references: [id])
  
  @@map("payments")
}

model Earning {
  id              String        @id @default(cuid())
  testerId        String
  testerSessionId String?
  amount          Decimal       @db.Decimal(8, 2)
  currency        String        @default("ETB")
  status          PaymentStatus @default(PENDING)
  description     String?
  paidAt          DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  tester          User          @relation(fields: [testerId], references: [id])
  
  @@map("earnings")
}

// ================================
// NOTIFICATIONS
// ================================

enum NotificationType {
  TEST_INVITATION
  TEST_COMPLETED
  PAYMENT_RECEIVED
  EARNING_AVAILABLE
  SYSTEM_UPDATE
  ACCOUNT_UPDATE
}

model Notification {
  id          String           @id @default(cuid())
  userId      String
  type        NotificationType
  title       String
  message     String
  data        Json?            // Additional notification data
  read        Boolean          @default(false)
  readAt      DateTime?
  createdAt   DateTime         @default(now())
  
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
}

// ================================
// ANALYTICS & INSIGHTS
// ================================

model Analytics {
  id          String   @id @default(cuid())
  testId      String?
  userId      String?
  event       String   // Event name (e.g., 'test_started', 'task_completed')
  data        Json     // Event data
  timestamp   DateTime @default(now())
  ipAddress   String?
  userAgent   String?
  
  @@map("analytics")
}

// ================================
// SYSTEM CONFIGURATION
// ================================

model SystemConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  updatedAt   DateTime @updatedAt
  
  @@map("system_config")
}